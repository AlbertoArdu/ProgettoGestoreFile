<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="sqlAggiornaNomeUtente" xml:space="preserve">
    <value>UPDATE utenti SET nome = @nuovo_nome WHERE nome = @nome;</value>
  </data>
  <data name="sqlAggiornaPassword" xml:space="preserve">
    <value>UPDATE utenti SET password = @pass WHERE nome =@nome;</value>
  </data>
  <data name="sqlCambiaNomeFile" xml:space="preserve">
    <value>UPDATE fileutente SET nome_file_c = @nome_file_c WHERE id = @id;</value>
  </data>
  <data name="sqlCambiaPathFile" xml:space="preserve">
    <value>UPDATE fileutente SET path_relativo_c = @path_relativo_c WHERE id=@id;</value>
  </data>
  <data name="sqlCercaFileDaDistruggere" xml:space="preserve">
    <value>SELECT id FROM fileutente WHERE valido = false AND nome_utente = @nome_utente AND t_creazione = ( SELECT MIN(t_creazione) FROM fileutente WHERE valido = false AND nome_utente = @nome_utente);</value>
  </data>
  <data name="sqlCheckUtente" xml:space="preserve">
    <value>SELECT * FROM utenti WHERE nome = @nome AND password = @password;</value>
    <comment>Query SQL per cercare un utente</comment>
  </data>
  <data name="sqlControllaNomeUtente" xml:space="preserve">
    <value>SELECT count(*) as conteggio FROM utenti WHERE nome = @nome;</value>
  </data>
  <data name="sqlGetFileData" xml:space="preserve">
    <value>SELECT nome_file_c, path_relativo_c, t_creazione, valido FROM fileutente WHERE id = @id AND nome_utente = @nome_utente;</value>
  </data>
  <data name="sqlGetFileNames" xml:space="preserve">
    <value>SELECT DISTINCT nome_file_c FROM fileutente WHERE nome_utente = @nome_utente AND path_relativo_c = @path_relativo_c;</value>
  </data>
  <data name="sqlGetIds" xml:space="preserve">
    <value>SELECT id FROM snapshots WHERE id_file = @id_file ORDER BY t_inserimento DESC;</value>
    <comment>Query SQL per ottenere gli id degli snapshot che un utente possiede</comment>
  </data>
  <data name="sqlGetPathNames" xml:space="preserve">
    <value>SELECT DISTINCT path_relativo_c FROM fileutente WHERE nome_utente = @nome_utente;</value>
  </data>
  <data name="sqlGetSnapshotData" xml:space="preserve">
    <value>SELECT dim, t_modifica, sha_contenuto, nome_locale_s FROM snapshots WHERE id = @id;</value>
    <comment>Query SQL per scaricare i dati di uno snapshot</comment>
  </data>
  <data name="sqlGetVersions" xml:space="preserve">
    <value>SELECT t_modifica FROM snapshots WHERE id_file = @id_file;</value>
  </data>
  <data name="sqlInsertSnapshotData" xml:space="preserve">
    <value>INSERT INTO snapshots (dim, t_modifica, sha_contenuto, nome_locale_s) VALUES (@dim, @t_modifica, @sha_contenuto, @nome_locale_s);</value>
    <comment>Query SQL per creare una nuova entry nella tabella snapshot</comment>
  </data>
  <data name="sqlNuovoFile" xml:space="preserve">
    <value>INSERT INTO fileutente(nome_utente, nome_file_c, path_relativo_c, t_creazione) VALUES (@nome_utente, @nome_file_c, @path_relativo_c,  @t_creazione)</value>
  </data>
  <data name="sqlSetInfoUtente" xml:space="preserve">
    <value>INSERT INTO utenti(nome,password) VALUES (@nome,@password);</value>
    <comment>Query SQL per scaricare i dati di un utente</comment>
  </data>
  <data name="sqlStoreSnapshotData" xml:space="preserve">
    <value>UPDATE snapshots SET dim = @dim, t_modifica = @t_modifica, sha_contenuto = @sha_contenuto, nome_locale_s = @nome_locale_s WHERE id = @id;</value>
    <comment>Query SQL per aggiornare un entry della tabella snapshot</comment>
  </data>
  <data name="tabellaFileUtente" xml:space="preserve">
    <value>create table fileutente (nome_utente varchar(20), id INTEGER PRIMARY KEY ASC, nome_file_c varchar(50), path_relativo_c varchar(100), t_creazione timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP, valido BOOLEAN DEFAULT TRUE, FOREIGN KEY (nome_utente) REFERENCES utenti(nome) ON DELETE CASCADE ON UPDATE CASCADE); </value>
    <comment>Codice SQL per creare la tabella dei file dell'utente</comment>
  </data>
  <data name="tabellaSnapshot" xml:space="preserve">
    <value>create table snapshots (
                        id INTEGER PRIMARY KEY ASC, 
                        id_file int,
                        dim int, 
                        t_modifica timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP, 
                        valido BOOLEAN DEFAULT TRUE,
                        nome_locale_s varchar(100), 
                        sha_contenuto char(128), 
                        FOREIGN KEY (id_file) REFERENCES fileutente(id) on delete cascade);</value>
    <comment>Codice SQL per creare la tabella degli snapshot</comment>
  </data>
  <data name="tabellaUtenti" xml:space="preserve">
    <value>create table utenti (nome varchar(20), password varchar(100), PRIMARY KEY(nome))</value>
    <comment>Codice SQL per creare la tabella utenti</comment>
  </data>
</root>