#!/usr/bin/python
import sys
import math
MAX_DIM = 10
if len(sys.argv) != 8:
	exit()
files = [ open(x,"r") for x in sys.argv if x!=sys.argv[0] ]
class PieceOfPuzzle:
	"""Class representing a piece of the puzzle"""
	def __init__(self, origin_file, i=0, j=0):
		self.i = i
		self.j = j
		self.dim = 0
		self.representation = [[ 0 for x in range(0,MAX_DIM)] for y in range(0,MAX_DIM)]
		while i < MAX_DIM:
			c = origin_file.read(1)
			if not c:
				break
			while c != '\n':
				if not (c.isspace()):
					self.dim = self.dim + 1
					self.representation[i][j] = c
				c = origin_file.read(1)
				if not c:
					break
				j = j +1
				if j > MAX_DIM:
					raise Exception("Fatal: Format not correct")
			i = i +1
			j = 0
	def try_in_position(self,i,j):
		for x in range(0,PieceOfPuzzle.dim):
			for y in range(0,PieceOfPuzzle.dim):
				if self.representation[x][y] != 0:
					if y+j >= PieceOfPuzzle.dim:
						return -2
					if x+i >= PieceOfPuzzle.dim:
						return -3
		for x in range(0,PieceOfPuzzle.dim):
			for y in range(0,PieceOfPuzzle.dim):
				if x+i<5 and y+j<PieceOfPuzzle.dim:
					if PieceOfPuzzle.matrix[x+i][y+j] != 0 and self.representation[x][y] != 0:
						return -1
		return 1
	def put(self,i,j):
		self.i = i
		self.j = j
		for x in range(0,PieceOfPuzzle.dim):
			for y in range(0,PieceOfPuzzle.dim):
				if self.representation[x][y] != 0:
					PieceOfPuzzle.matrix[x+self.i][y+self.j] = self.representation[x][y]
	def delete(self):
		for x in range(0,PieceOfPuzzle.dim):
			for y in range(0,PieceOfPuzzle.dim):
				if self.representation[x][y] != 0:
					PieceOfPuzzle.matrix[x+self.i][y+self.j] = 0
pieces = [ PieceOfPuzzle(p) for p in files]
PieceOfPuzzle.dim = 0
for p in pieces:
	PieceOfPuzzle.dim = PieceOfPuzzle.dim + p.dim
PieceOfPuzzle.dim = int(math.floor(math.sqrt(PieceOfPuzzle.dim)))
PieceOfPuzzle.matrix = [[ 0 for x in range(0,PieceOfPuzzle.dim)] for y in range(0,PieceOfPuzzle.dim)]
def build(pieces, id_piece):
	if id_piece>=7:
		return 1
	i=0
	j=0
	while 1==1:
		ret_val = pieces[id_piece].try_in_position(i, j)
		if ret_val == -1:
			j = j+1
			if j == PieceOfPuzzle.dim:
				i = i + 1
				j = 0
				if i >= PieceOfPuzzle.dim:
					return 0
		elif ret_val == -2:
			i = i+1
			j = 0
		elif ret_val == -3:
			return 0
		else:
			pieces[id_piece].put(i,j)
			if build(pieces, id_piece+1) == 1:
				return 1
			else:
				j = j+1
				if j == PieceOfPuzzle.dim:
					i = i + 1
					j = 0
					if i >= PieceOfPuzzle.dim:
						return 0
			pieces[id_piece].delete()
build(pieces,0)
for x in range(0,PieceOfPuzzle.dim):
	s = ''
	for y in range(0,PieceOfPuzzle.dim):
		s += PieceOfPuzzle.matrix[x][y]
	print s